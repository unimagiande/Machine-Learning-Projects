!pip install category-encoders

# import libs

import warnings
warnings.filterwarnings("ignore")
import pandas as pd
import category_encoders as ce

pd.set_option("display.max_columns", None) #display max columns

df = pd.read_csv("5G_energy_consumption_dataset.csv", encoding="latin-1") #import data
df

df.info()

df = df.drop("Time", axis=1) #drop time
df.describe(include = "all").T

df["BS"].value_counts()`

# Target Encoding
encoder = ce.TargetEncoder(cols=['BS'])
df['BS_encoded'] = encoder.fit_transform(df['BS'], df['Energy'])
df

#Feature selection

X = df[['BS_encoded', 'TXpower', 'load', 'ESMODE']]
y = df['Energy']

from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split

# Separate the DataFrame into two: features and the target variable
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state = 42)

scaler = StandardScaler()

X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

X_train

y_train

import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Initialize the model
linear_reg = LinearRegression()

# Fit the model to the training data
linear_reg.fit(X_train_scaled, y_train)

# Predict on the test data
y_pred_linear = linear_reg.predict(X_test_scaled)

# Evaluate the model
rmse_linear = np.sqrt(mean_squared_error(y_test, y_pred_linear))
r2_linear = r2_score(y_test, y_pred_linear)

print(f"Linear Regression:\n RMSE: {rmse_linear:.4f}\n R²: {r2_linear:.4f}\n")

from sklearn.ensemble import GradientBoostingRegressor

# Initialize the model
gb_reg = GradientBoostingRegressor()

# Fit the model to the training data
gb_reg.fit(X_train_scaled, y_train)

# Predict on the test data
y_pred_gb = gb_reg.predict(X_test_scaled)

# Evaluate the model
rmse_gb = np.sqrt(mean_squared_error(y_test, y_pred_gb))
r2_gb = r2_score(y_test, y_pred_gb)

print(f"Gradient Boosting Regressor:\n RMSE: {rmse_gb:.4f}\n R²: {r2_gb:.4f}\n")

import xgboost as xgb
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Initialize the model
xgb_reg = xgb.XGBRegressor()

# Fit the model to the training data
xgb_reg.fit(X_train_scaled, y_train)

# Predict on the test data
y_pred_xgb = xgb_reg.predict(X_test_scaled)

# Evaluate the model
rmse_xgb = np.sqrt(mean_squared_error(y_test, y_pred_xgb))
r2_xgb = r2_score(y_test, y_pred_xgb)

print(f"XGBoost Regressor:\n RMSE: {rmse_xgb:.4f}\n R²: {r2_xgb:.4f}\n")

