import warnings

warnings.filterwarnings('ignore')

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score, roc_auc_score
import ydata_profiling as ydata

print(f" Libraries successfully imported")

data = pd.read_csv('African_crises_dataset.csv')
data

#Dsiplay first 5 rows 
data.head()

data.info()

data.describe()

from ydata_profiling import ProfileReport

profile = ProfileReport(data, title="Systemic Crisis Dataset Report", explorative=True)
profile.to_file("systemic_crisis_report.html")

data.isnull().sum() 

duplicates = data.duplicated().sum()
duplicates

# Using IQR method for handling outliers in 'Inflation Rate'
Q1 = data['inflation_annual_cpi'].quantile(0.25)
Q3 = data['inflation_annual_cpi'].quantile(0.75)
IQR = Q3 - Q1
data_df = data[~((data['inflation_annual_cpi'] < (Q1 - 1.5 * IQR)) | (data['inflation_annual_cpi'] > (Q3 + 1.5 * IQR)))]
data_df

# Selecting Target and Features
X = data.drop('systemic_crisis', axis=1)  
y = data['systemic_crisis']  

#Split Data into Training and Test Sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the Model
model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)

#Evaluate Model Performance
y_pred = model.predict(X_test)
print("\nConfusion Matrix:")
print(confusion_matrix(y_test, y_pred))
print("\nClassification Report:")
print(classification_report(y_test, y_pred))
print("\nAccuracy Score:", accuracy_score(y_test, y_pred))
print("\nROC AUC Score:", roc_auc_score(y_test, y_pred))

importances

%matplotlib inline
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
plt.figure(figsize=(10, 6))
plt.title("Feature Importance")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), X.columns[indices], rotation=90)
plt.show()

